progress <- 0                            #index for print when make progress and early break
break.index <- 1
for(i in 1:iteration){
#deal with early break and print when make progress
if((i - break.index) >= early.break){
break
}else if(progress == 1){
print(GB)
progress <- 0
break.index <- i
}
#6: For each SSD, perform the MIX operation
mixw <- mixOperation(particle = particle, SIBSSD.list = SIBSSD.list, LB = LB,GB = GB, qLB = qLB, qGB = qGB)
####
# mixLB.tem <- numeric(particle)
# mixGB.tem <- numeric(particle)
# for(i in 1:particle){
#   mixLB.tem[i] <- mixw$mixwLB[[i]]$value
#   mixGB.tem[i] <- mixw$mixwGB[[i]]$value
# }
# print(mixLB.tem)
# print(mixGB.tem)
#
# print(mixw$mixwLB[[1]]$design)
# print(mixw$mixwGB[[1]]$design)
####
#7: For each SSD, perform the MOVE operation
SIBSSD.list <- moveOperation(particle = particle,
SIBSSD.list = SIBSSD.list,
mixwLB = mixw$mixwLB,
mixwGB = mixw$mixwGB,
qLB = qLB,
qGB = qGB)
#9: Update the LB for all SSDs
Es2.value <- sapply(SIBSSD.list,evaluateEs2)
for(j in 1:particle){
if(Es2.value[j] < LB[[j]]$value){
LB[[j]] <- list(design = SIBSSD.list[[j]], value = Es2.value[j])
}
}
#10: Update the GB
if(min(Es2.value) < GB$value){
GB <- LB[[which.min(Es2.value)]]
progress <- 1
}
record <- c(record,GB$value)
#11: end while
}
return(list(GB,record))
}
N <- 6
m <- 10
qLB <- round(m/4)
qGB <- round(m/6)
SIBSSD(particle = 5, N = N, m = m, qLB = qLB, qGB = qGB, iteration = 10, early.break = 100)
Sys.setlocale('LC_ALL','C')
source_rmd("D:/statisic/Master_thesis/SIBSSD/SIBSSD_functions.Rmd")
N <- 6
m <- 10
qLB <- round(m/4)
qGB <- round(m/6)
SIBSSD(particle = 5, N = N, m = m, qLB = qLB, qGB = qGB, iteration = 10, early.break = 100)
library(tictoc)
tic()
N <- 10
m <- 18
qLB <- round(m/3)
qGB <- round(m/6)
SIBSSD(particle = 500, N = N, m = m, qLB = qLB, qGB = qGB, iteration = 500,early.break = 100)
toc()
source_rmd <- function(file, local = FALSE, ...){
options(knitr.duplicate.label = 'allow')
tempR <- tempfile(tmpdir = ".", fileext = ".R")
on.exit(unlink(tempR))
knitr::purl(file, output=tempR, quiet = TRUE)
envir <- globalenv()
source(tempR, local = envir, ...)
}
Sys.setlocale('LC_ALL','C')
source_rmd("D:/statisic/Master_thesis/MSIBSSD/MSIBSSD_functions.Rmd")
table1 <- read.csv("D:/statisic/Master_thesis/MSIBSSD/table1.csv",  header = FALSE)
table1 <- as.matrix(table1)
Dcriterion(mSSD = table1, f = 2, m1 = m1, m2 = m2, n1 = n1, n2 = n2)
m1 = 8
m2 = 8
n1 = 6
n2 = 6
Dcriterion(mSSD = table1, f = 2, m1 = m1, m2 = m2, n1 = n1, n2 = n2)
Dcriterion(mSSD = table1, f = 3, m1 = m1, m2 = m2, n1 = n1, n2 = n2)
Dcriterion(mSSD = table1, f = 4, m1 = m1, m2 = m2, n1 = n1, n2 = n2)
Dcriterion(mSSD = table1, f = 5, m1 = m1, m2 = m2, n1 = n1, n2 = n2)
mSIBSSD <- function(particle, m1, m2, n1, n2, qLB, qGB, w.ratio, iteration, early.break = 100){
#1: Randomly generate a set of balanced N*m SSDs as initial particles
mSIBSSD.list <- list()
for(i in 1:particle){
mSIBSSD.list[[i]] <- generateMSSD(m1 = m1, m2 = m2, n1 = n1, n2 = n2)
}
#2: Evaluate objective function value of each SSD
Df.value <- numeric(particle)
for(j in 1:particle){
Df.value[j] <- Dcriterion(mSSD = mSIBSSD.list[[j]], f = f,m1 = m1, m2 = m2, n1 = n1,n2 = n2)
}
#3: Initialize the LB for all SSDs
LB <- list()
for(i in 1:particle){
LB[[i]] <- list(design = mSIBSSD.list[[i]], value = Df.value[i])
}
#4: Initialize the GB
GB <- LB[[1]]
for(i in 1:particle){
if(LB[[i]]$value > GB$value)
GB <- LB[[i]]
}
#record the GB value
record <- GB$value
#5: while not converge do
progress <- 0                            #index for print when make progress and early break
break.index <- 1
for(i in 1:iteration){
#deal with early break and print when make progress
if((i - break.index) >= early.break){
break
}else if(progress == 1){
print(GB)
progress <- 0
break.index <- i
}
#6: For each SSD, perform the MIX operation
mixw <- mixOperation(particle = particle,mSIBSSD.list = mSIBSSD.list, w.ratio = w.ratio, LB = LB,GB = GB, qLB = qLB, qGB = qGB)
####
# mixLB.tem <- numeric(particle)
# mixGB.tem <- numeric(particle)
# for(i in 1:particle){
#   mixLB.tem[i] <- mixw$mixwLB[[i]]$value
#   mixGB.tem[i] <- mixw$mixwGB[[i]]$value
# }
# print(mixLB.tem)
# print(mixGB.tem)
#
# print(mixw$mixwLB[[1]]$design)
# print(mixw$mixwGB[[1]]$design)
####
#7: For each SSD, perform the MOVE operation
mSIBSSD.list <- moveOperation(particle = particle,
mSIBSSD.list = mSIBSSD.list,
w.ratio = w.ratio,
mixwLB = mixw$mixwLB,
mixwGB = mixw$mixwGB,
qLB = qLB,
qGB = qGB)
#9: Update the LB for all SSDs
Df.value <- numeric(particle)
for(j in 1:particle){
Df.value[j] <- Dcriterion(mSSD = mSIBSSD.list[[j]], f = f,m1 = m1, m2 = m2, n1 = n1,n2 = n2)
}
for(j in 1:particle){
if(Df.value[j] > LB[[j]]$value){
LB[[j]] <- list(design = mSIBSSD.list[[j]], value = Df.value[j])
}
}
#10: Update the GB
if(max(Df.value) > GB$value){
GB <- LB[[which.max(Df.value)]]
progress <- 1
}
record <- c(record,GB$value)
#11: end while
}
return(list(GB,record))
}
m1 = 8
m2 = 8
n1 = 6
n2 = 6
f = 2
qLB = 4
qGB = 3
w.ratio = 0.2
test <- mSIBSSD(particle = 5, m1 = m1, m2 = m2, n1 = n1, n2 = n2, qLB = qLB, qGB = qGB, w.ratio = w.ratio, iteration = 5, early.break = 100)
mixOperation
m1 = 8
m2 = 8
n1 = 6
n2 = 6
f = 2
qLB = 4
qGB = 3
m1 = 8
m2 = 8
n1 = 6
n2 = 6
f = 2
qLB = 4
qGB = 3
w.ratio = 0.2
mSIBSSD.list <- list()
for(i in 1:particle){
mSIBSSD.list[[i]] <- generateMSSD(m1 = m1, m2 = m2, n1 = n1, n2 = n2)
}
particle = 5
mSIBSSD.list <- list()
for(i in 1:particle){
mSIBSSD.list[[i]] <- generateMSSD(m1 = m1, m2 = m2, n1 = n1, n2 = n2)
}
Df.value <- numeric(particle)
for(j in 1:particle){
Df.value[j] <- Dcriterion(mSSD = mSIBSSD.list[[j]], f = f,m1 = m1, m2 = m2, n1 = n1,n2 = n2)
}
LB <- list()
for(i in 1:particle){
LB[[i]] <- list(design = mSIBSSD.list[[i]], value = Df.value[i])
}
GB <- LB[[1]]
for(i in 1:particle){
if(LB[[i]]$value > GB$value)
GB <- LB[[i]]
}
#record the GB value
record <- GB$value
mixw <- mixOperation(particle = particle,mSIBSSD.list = mSIBSSD.list, w.ratio = w.ratio, LB = LB,GB = GB, qLB = qLB, qGB = qGB)
mixw$mixwLB
mixw$mixwGB
i = 1
worksheet <- mSIBSSD.list[[i]]
tem <- worksheet
tem.m1 <- m1
tem.m2 <- m2
w.qLB <- rbinom(n = 1, size = qLB, prob = w.ratio)
s.qLB <- qLB - w.qLB
w.qLB
s.qLB
#wholeplot
if(w.qLB != 0){
for(j in 1:w.qLB){
lack.value <- numeric(tem.m1)
for(k in 1:m1){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-k], f = f, m1 = tem.m1 - 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- tem[,-which.max(lack.value)]
tem.m1 <- tem.m1 - 1
#lack.m1 <- lack.m1 + 1
}
}
tem
if(s.qLB != 0){
for(j in 1:s.qLB){
lack.value <- numeric(tem.m2)
for(k in 1:m2){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-(tem.m1 + k)], f = f, m1 = tem.m1, m2 = tem.m2 - 1, n1 = n1,n2 = n2)
}
tem <- tem[,-(tem.m1 + which.max(lack.value))]
tem.m2 <- tem.m2 - 1
#lack.m2 <- lack.m2 + 1
}
}
tem
s.qLB
j in 1:s.qLB
s.qLB
tem <- worksheet
tem
#wholeplot
if(w.qLB != 0){
for(j in 1:w.qLB){
lack.value <- numeric(tem.m1)
for(k in 1:tem.m1){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-k], f = f, m1 = tem.m1 - 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- tem[,-which.max(lack.value)]
tem.m1 <- tem.m1 - 1
#lack.m1 <- lack.m1 + 1
}
}
#subplot
if(s.qLB != 0){
for(j in 1:s.qLB){
lack.value <- numeric(tem.m2)
for(k in 1:tem.m2){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-(tem.m1 + k)], f = f, m1 = tem.m1, m2 = tem.m2 - 1, n1 = n1,n2 = n2)
}
tem <- tem[,-(tem.m1 + which.max(lack.value))]
tem.m2 <- tem.m2 - 1
#lack.m2 <- lack.m2 + 1
}
}
tem
tem <- worksheet
tem.m1 <- m1
tem.m2 <- m2
#wholeplot
if(w.qLB != 0){
for(j in 1:w.qLB){
lack.value <- numeric(tem.m1)
for(k in 1:tem.m1){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-k], f = f, m1 = tem.m1 - 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- tem[,-which.max(lack.value)]
tem.m1 <- tem.m1 - 1
#lack.m1 <- lack.m1 + 1
}
}
#subplot
if(s.qLB != 0){
for(j in 1:s.qLB){
lack.value <- numeric(tem.m2)
for(k in 1:tem.m2){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-(tem.m1 + k)], f = f, m1 = tem.m1, m2 = tem.m2 - 1, n1 = n1,n2 = n2)
}
tem <- tem[,-(tem.m1 + which.max(lack.value))]
tem.m2 <- tem.m2 - 1
#lack.m2 <- lack.m2 + 1
}
}
tem
#column addition step
#wholeplot
add.matrix <- LB[[i]]$design
if(w.qLB != 0){
for(j in 1:w.qLB){
add.value <- numeric(m1)
for(k in 1:m1){
add.value[k] <- Dcriterion(mSSD = cbind(add.matrix[ ,k], tem), f = f,m1 = tem.m1 + 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- cbind(add.matrix[,which.max(add.value)], tem)
tem.m1 <- tem.m1 + 1
}
}
#subplot
if(s.qLB != 0){
for(j in 1:s.qLB){
add.value <- numeric(m2)
for(k in 1:m2){
add.value[k] <- Dcriterion(mSSD = cbind(add.matrix[ ,m1 + k], tem), f = f,m1 = tem.m1, m2 = tem.m2 + 1, n1 = n1,n2 = n2)
}
tem <- cbind(tem,add.matrix[,tem.m1 + which.max(add.value)])
tem.m2 <- tem.m2 + 1
}
}
tem
mixOperation <- function(particle, mSIBSSD.list, w.ratio = 0.2, LB, GB, qLB, qGB){
mixwLB <- list()
mixwGB <- list()
for(i in 1:particle){
worksheet <- mSIBSSD.list[[i]]
###mixwLB###
#column deletion step
tem <- worksheet
tem.m1 <- m1
tem.m2 <- m2
#radom
w.qLB <- rbinom(n = 1, size = qLB, prob = w.ratio)
s.qLB <- qLB - w.qLB
#wholeplot
if(w.qLB != 0){
for(j in 1:w.qLB){
lack.value <- numeric(tem.m1)
for(k in 1:tem.m1){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-k], f = f, m1 = tem.m1 - 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- tem[,-which.max(lack.value)]
tem.m1 <- tem.m1 - 1
#lack.m1 <- lack.m1 + 1
}
}
#subplot
if(s.qLB != 0){
for(j in 1:s.qLB){
lack.value <- numeric(tem.m2)
for(k in 1:tem.m2){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-(tem.m1 + k)], f = f, m1 = tem.m1, m2 = tem.m2 - 1, n1 = n1,n2 = n2)
}
tem <- tem[,-(tem.m1 + which.max(lack.value))]
tem.m2 <- tem.m2 - 1
#lack.m2 <- lack.m2 + 1
}
}
#column addition step
#wholeplot
add.matrix <- LB[[i]]$design
if(w.qLB != 0){
for(j in 1:w.qLB){
add.value <- numeric(m1)
for(k in 1:m1){
add.value[k] <- Dcriterion(mSSD = cbind(add.matrix[ ,k], tem), f = f,m1 = tem.m1 + 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- cbind(add.matrix[,which.max(add.value)], tem)
tem.m1 <- tem.m1 + 1
}
}
#subplot
if(s.qLB != 0){
for(j in 1:s.qLB){
add.value <- numeric(m2)
for(k in 1:m2){
add.value[k] <- Dcriterion(mSSD = cbind(add.matrix[ ,m1 + k], tem), f = f,m1 = tem.m1, m2 = tem.m2 + 1, n1 = n1,n2 = n2)
}
tem <- cbind(tem,add.matrix[,tem.m1 + which.max(add.value)])
tem.m2 <- tem.m2 + 1
}
}
###
mixwLB[[i]] <- list(design = tem,value = Dcriterion(mSSD = tem, f = f,m1 = m1, m2 = m2, n1 = n1,n2 = n2))  #important value
###
###mixwGB###
#column deletion step
tem <- worksheet
tem.m1 <- m1
tem.m2 <- m2
#radom
w.qGB <- rbinom(n = 1, size = qGB, prob = w.ratio)
s.qGB <- qGB - w.qGB
#wholeplot
if(w.qGB != 0){
for(j in 1:w.qGB){
lack.value <- numeric(tem.m1)
for(k in 1:tem.m1){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-k], f = f, m1 = tem.m1 - 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- tem[,-which.max(lack.value)]
tem.m1 <- tem.m1 - 1
#lack.m1 <- lack.m1 + 1
}
}
#subplot
if(s.qGB != 0){
for(j in 1:s.qGB){
lack.value <- numeric(tem.m2)
for(k in 1:tem.m2){
lack.value[k] <- Dcriterion(mSSD = tem[ ,-(tem.m1 + k)], f = f, m1 = tem.m1, m2 = tem.m2 - 1, n1 = n1,n2 = n2)
}
tem <- tem[,-(tem.m1 + which.max(lack.value))]
tem.m2 <- tem.m2 - 1
#lack.m2 <- lack.m2 + 1
}
}
#column addition step
#wholeplot
add.matrix <- GB$design
if(w.qGB != 0){
for(j in 1:w.qGB){
add.value <- numeric(m1)
for(k in 1:m1){
add.value[k] <- Dcriterion(mSSD = cbind(add.matrix[ ,k], tem), f = f,m1 = tem.m1 + 1, m2 = tem.m2, n1 = n1,n2 = n2)
}
tem <- cbind(add.matrix[,which.max(add.value)], tem)
tem.m1 <- tem.m1 + 1
}
}
#subplot
if(s.qGB != 0){
for(j in 1:s.qGB){
add.value <- numeric(m2)
for(k in 1:m2){
add.value[k] <- Dcriterion(mSSD = cbind(add.matrix[ ,m1 + k], tem), f = f,m1 = tem.m1, m2 = tem.m2 + 1, n1 = n1,n2 = n2)
}
tem <- cbind(tem,add.matrix[,tem.m1 + which.max(add.value)])
tem.m2 <- tem.m2 + 1
}
}
###
mixwGB[[i]] <- list(design = tem,value = Dcriterion(mSSD = tem, f = f,m1 = m1, m2 = m2, n1 = n1,n2 = n2))  #important value
###
# ###mixwGB###
# #column deletion step
# tem <- worksheet
# for(j in 1:qGB){
#   lack.value <- numeric(ncol(tem))
#   for(k in 1:ncol(tem)){
#     lack.value[k] <- evaluateEs2(tem[,-k])
#   }
#   tem <- tem[,-which.min(lack.value)]
# }
#
# #column addition step
# add.matrix <- GB$design
# for(j in 1:qGB){
#   add.value <- numeric(ncol(tem))
#   for(k in 1:ncol(add.matrix)){
#     add.value[k] <- evaluateEs2(cbind(tem,add.matrix[,k]))
#   }
#   tem <- cbind(tem,add.matrix[,which.min(add.value)])
#
# }
#
# mixwGB[[i]] <- list(design = tem,value = evaluateEs2(tem))  #important value
#column addition step
}
return(list(mixwLB = mixwLB, mixwGB = mixwGB))
}
particle = 5
m1 = 8
m2 = 8
n1 = 6
n2 = 6
f = 2
qLB = 4
qGB = 3
w.ratio = 0.2
test <- mSIBSSD(particle = particle, m1 = m1, m2 = m2, n1 = n1, n2 = n2, qLB = qLB, qGB = qGB, w.ratio = w.ratio, iteration = 5, early.break = 100)
test
test[[1]]$design
Dcriterion(test[[1]]$design,f=2,m1=m1,m2=m2,n1,n1)
particle = 100
m1 = 8
m2 = 8
n1 = 6
n2 = 6
f = 2
qLB = 4
qGB = 3
w.ratio = 0.2
test <- mSIBSSD(particle = particle, m1 = m1, m2 = m2, n1 = n1, n2 = n2, qLB = qLB, qGB = qGB, w.ratio = w.ratio, iteration = 100, early.break = 100)
